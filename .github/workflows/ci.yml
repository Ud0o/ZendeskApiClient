name: ci

on:
  push:
    branches: [ master ]
    tags: [ v* ]
  pull_request:
    branches: [ master, dotnet-vnext ]
  workflow_dispatch:

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
  NUGET_XMLDOC_MODE: skip
  TERM: xterm

permissions:
  contents: read

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
        include:
          - os: macos-latest
            os_name: macos
          - os: ubuntu-latest
            os_name: linux
          - os: windows-latest
            os_name: windows

    steps:

    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '3.1.x'

    - name: Setup NuGet cache
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Build & Unit tests
      shell: pwsh
      run: ./build.ps1 --target=Run-Unit-Tests

    - name: Run Integration tests
      shell: pwsh
      run: ./build.ps1 --target=Run-Integration-Tests --zendeskUrl= ${{ secrets.ZENDESK_URL }} --zendeskUsername= ${{ secrets.ZENDESK_USERNAME }} --zendeskToken= ${{ secrets.ZENDESK_TOKEN }}

    - name: Package
      shell: pwsh
      run: ./build.ps1 --target=Package
      
    # - uses: codecov/codecov-action@eaaf4bedf32dbdc6b720b63067d99c4d77d6047d # v3.1.4
    #   name: Upload coverage to Codecov
    #   with:
    #     file: ./artifacts/coverage/coverage.net7.0.cobertura.xml
    #     flags: ${{ matrix.os_name }}

    # - name: Publish artifacts to Github actions cache
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: artifacts-${{ matrix.os_name }}
    #     path: ./artifacts

    - name: Publish NuGet package to Github actions cache
      uses: actions/upload-artifact@v3
      with:
        name: packages-${{ matrix.os_name }}
        path: ./artifacts
        if-no-files-found: error

  validate-packages:
    needs: build
    runs-on: ubuntu-latest
    steps:

    - name: Download packages
      uses: actions/download-artifact@v3
      with:
        name: packages-windows

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '3.1.x'

    - name: Validate NuGet packages
      shell: pwsh
      run: |
        dotnet tool install --global dotnet-validate --version 0.0.1-preview.304
        $packages = Get-ChildItem -Filter "*.nupkg" | ForEach-Object { $_.FullName }
        $invalidPackages = 0
        foreach ($package in $packages) {
          dotnet validate package local $package
          if ($LASTEXITCODE -ne 0) {
            $invalidPackages++
          }
        }
        if ($invalidPackages -gt 0) {
          Write-Output "::error::$invalidPackages NuGet package(s) failed validation."
        }

  publish-nuget:
    needs: validate-packages
    runs-on: ubuntu-latest
    if: |
      github.event.repository.fork == false &&
      startsWith(github.ref, 'refs/tags/v')
    steps:

    - name: Download packages
      uses: actions/download-artifact@v3
      with:
        name: packages-windows

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '3.1.x'

    - name: Push NuGet packages to NuGet.org
      run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.NUGET_TOKEN }} --skip-duplicate --source https://api.nuget.org/v3/index.json